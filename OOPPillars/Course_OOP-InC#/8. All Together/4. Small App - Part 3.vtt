WEBVTT

00:00.090 --> 00:03.020
So in this video let's go ahead and see what we've done so far.

00:03.030 --> 00:10.040
I'll go to the program and if we open up our requirements we can see that everything is now fulfilled.

00:10.050 --> 00:12.560
Now let's see how this thing works.

00:12.800 --> 00:19.720
Breakpoint here and try to run it and give it a shot.

00:19.740 --> 00:20.360
Okay cool.

00:20.420 --> 00:21.620
So let's step through this.

00:21.650 --> 00:22.780
We create the list.

00:22.790 --> 00:26.330
Imagine like we've got this from the database and there's three promoters.

00:26.330 --> 00:29.720
So bring this guy up so we can see what's going on.

00:30.620 --> 00:32.630
And we'll go one by one.

00:32.960 --> 00:38.170
So first one is an access promoter says I share with my Instagram followers.

00:38.180 --> 00:40.100
I use Facebook as cool.

00:40.490 --> 00:43.350
Another access promoter does the same thing.

00:43.370 --> 00:44.760
Then we have an omni one.

00:45.170 --> 00:45.780
OK.

00:45.830 --> 00:47.060
I share with my friends.

00:47.060 --> 00:48.220
I use Google AdWords.

00:48.260 --> 00:55.270
Now once again you see promoter Don promote it's promoting for any promoter just calls Don promote.

00:55.280 --> 00:59.720
It doesn't know whether it's access club promoter omni club promoter or any other type that we add in

00:59.720 --> 01:00.350
the future.

01:00.350 --> 01:03.260
Once again remember this is dynamic polymorphism.

01:03.290 --> 01:05.570
Same method different behavior.

01:05.570 --> 01:07.150
Let's move on.

01:07.190 --> 01:10.400
Next thing is we go to the writers.

01:10.730 --> 01:12.290
And then there are three writers.

01:12.290 --> 01:14.610
So the first two are book writers.

01:14.610 --> 01:20.540
So it says I write books I write books I write for my own blog.

01:20.540 --> 01:21.500
Cool.

01:21.500 --> 01:24.390
Once again dynamic polymorphism.

01:24.600 --> 01:30.810
And here you can see this is encapsulation because we say dot promote but promotion has its own way

01:30.810 --> 01:31.400
of working.

01:31.400 --> 01:35.770
We don't know how it works it just works in a way where we define it.

01:35.880 --> 01:38.440
But underneath the hood it works in a specific way.

01:38.460 --> 01:41.150
This is abstraction through encapsulation.

01:41.190 --> 01:46.430
We're basically encapsulating details that we find would be irrelevant for the user.

01:46.440 --> 01:47.340
So we just keep going.

01:48.450 --> 01:51.770
And then we'll move the robot builders and we go through this.

01:51.780 --> 01:56.820
There is only two types that's success club promoter we we go through this I say I work out at my house

01:57.060 --> 02:04.470
and I work out in my house cool bloggers club promoter book writers see these are totally unrelated

02:04.470 --> 02:08.840
groups and we are combining them in the same list because of an interface.

02:08.880 --> 02:15.730
So it goes through says I use of the SLR in order to log that's for excess club promoter then book writer

02:15.730 --> 02:18.240
says I blog using my iPhone.

02:18.470 --> 02:21.200
OK so here we go.

02:21.330 --> 02:23.150
And that's the end of our program.

02:23.160 --> 02:25.500
So pretty simple application indeed.

02:25.500 --> 02:30.090
The point of this wasn't to kind of like show you how to write complex applications.

02:30.090 --> 02:34.980
Obviously this was a pretty simple application but the point of this was for you to kind of challenge

02:34.980 --> 02:40.530
yourself and write an application from scratch using all of the object oriented principles.

02:40.590 --> 02:42.490
And in here we've used all of them.

02:42.510 --> 02:48.020
First of all we've used all of the major tools that make up object our programming.

02:48.030 --> 02:54.420
And we've also used all of the four main pillars we've use inheritance when we're inheriting creating

02:54.420 --> 02:55.510
our hierarchies.

02:55.650 --> 02:58.230
We used polymorphism right here.

02:58.230 --> 03:03.480
We're using polymorphism as we're going through each type and just calling a method that behaves differently

03:03.480 --> 03:04.280
for each type.

03:04.290 --> 03:10.490
That's in the list we have used encapsulation which defines how a promoter promotes.

03:10.740 --> 03:15.050
And we don't see and can't access it from the outside.

03:15.060 --> 03:16.470
We just call that promote.

03:16.470 --> 03:17.820
And it does its own thing.

03:17.820 --> 03:23.700
And that actually leads us into abstraction because we just say promote but we don't know how it promotes

03:23.970 --> 03:26.430
which is the why behind our encapsulation.

03:26.520 --> 03:29.610
The reason why we encapsulate it is so that people don't know how we promote.

03:29.610 --> 03:31.220
They just know that we promote.

03:31.230 --> 03:37.230
And so once again with all that said this is our small application and I hope you'll like this application.

03:37.230 --> 03:41.550
I hope that you got it all right from the first go and if you didn't it's all good.

03:41.550 --> 03:42.300
That's how I learn.

03:42.300 --> 03:44.060
I hope you filled in any gaps.

03:44.070 --> 03:45.640
I hope you learned what you've done wrong.

03:45.660 --> 03:46.880
If you have done anything wrong.

03:47.220 --> 03:50.040
And with that set I'll see you in the next section.
